#!/bin/bash

################################################## Colour Code Int ##################################################
BLACK="\033[30m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"
LBLACK="\033[90m"
LRED="\033[91m"
LGREEN="\033[92m"
LYELLOW="\033[93m"
LBLUE="\033[94m"
LMAGENTA="\033[95m"
LCYAN="\033[96m"
LWHITE="\033[97m"
RESET="\033[0m"
################################################## Colour Code End ##################################################

################################################## Progress Bar Int ##################################################
progreSh() {
    LR='\033[1;31m'
    LG='\033[1;32m'
    LY='\033[1;33m'
    LC='\033[1;36m'
    LW='\033[1;37m'
    NC='\033[0m'
    if [ "${1}" = "0" ]; then TME=$(date +"%s"); fi
    SEC=`printf "%04d\n" $(($(date +"%s")-${TME}))`; SEC="$SEC sec"
    PRC=`printf "%.0f" ${1}`
    SHW=`printf "%3d\n" ${PRC}`
    LNE=`printf "%.0f" $((${PRC}/2))`
    LRR=`printf "%.0f" $((${PRC}/2-12))`; if [ ${LRR} -le 0 ]; then LRR=0; fi;
    LYY=`printf "%.0f" $((${PRC}/2-24))`; if [ ${LYY} -le 0 ]; then LYY=0; fi;
    LCC=`printf "%.0f" $((${PRC}/2-36))`; if [ ${LCC} -le 0 ]; then LCC=0; fi;
    LGG=`printf "%.0f" $((${PRC}/2-48))`; if [ ${LGG} -le 0 ]; then LGG=0; fi;
    LRR_=""
    LYY_=""
    LCC_=""
    LGG_=""
    for ((i=1;i<=13;i++))
    do
        DOTS=""; for ((ii=${i};ii<13;ii++)); do DOTS="${DOTS}."; done
        if [ ${i} -le ${LNE} ]; then LRR_="${LRR_}#"; else LRR_="${LRR_}."; fi
        echo -ne "  ${LW}${SEC}  ${LR}${LRR_}${DOTS}${LY}............${LC}............${LG}............ ${SHW}%${NC}\r"
        if [ ${LNE} -ge 1 ]; then sleep 0.07; fi
    done
    for ((i=14;i<=25;i++))
    do
        DOTS=""; for ((ii=${i};ii<25;ii++)); do DOTS="${DOTS}."; done
        if [ ${i} -le ${LNE} ]; then LYY_="${LYY_}#"; else LYY_="${LYY_}."; fi
        echo -ne "  ${LW}${SEC}  ${LR}${LRR_}${LY}${LYY_}${DOTS}${LC}............${LG}............ ${SHW}%${NC}\r"
        if [ ${LNE} -ge 14 ]; then sleep 0.07; fi
    done
    for ((i=26;i<=37;i++))
    do
        DOTS=""; for ((ii=${i};ii<37;ii++)); do DOTS="${DOTS}."; done
        if [ ${i} -le ${LNE} ]; then LCC_="${LCC_}#"; else LCC_="${LCC_}."; fi
        echo -ne "  ${LW}${SEC}  ${LR}${LRR_}${LY}${LYY_}${LC}${LCC_}${DOTS}${LG}............ ${SHW}%${NC}\r"
        if [ ${LNE} -ge 26 ]; then sleep 0.07; fi
    done
    for ((i=38;i<=49;i++))
    do
        DOTS=""; for ((ii=${i};ii<49;ii++)); do DOTS="${DOTS}."; done
        if [ ${i} -le ${LNE} ]; then LGG_="${LGG_}#"; else LGG_="${LGG_}."; fi
        echo -ne "  ${LW}${SEC}  ${LR}${LRR_}${LY}${LYY_}${LC}${LCC_}${LG}${LGG_}${DOTS} ${SHW}%${NC}\r"
        if [ ${LNE} -ge 38 ]; then sleep 0.07; fi
    done
}
################################################## Progress Bar End ##################################################

################################################# Progress Run Int #################################################
progreSh 0
progreSh 100
printf "\n"
################################################# Progress Run End ##################################################

################################################## Validation Int ##################################################
echo -e "   ${YELLOW}------------------------Mass SSH Executor by ${RED}p3rL${YELLOW}----------------------${RESET}"
echo -ne "  ${YELLOW}[${RED} NOTE : ${WHITE}Just empty the fields if you don't know what you are doing ${YELLOW}]  \n"
echo -e "   ${YELLOW}------------------------Mass SSH Executor by ${RED}p3rL${YELLOW}----------------------${RESET}"
SSHLIST="$1"
if [ -z "$RSAKEY" ];	then
	echo -e "   ${YELLOW}---------------------------------RSA KEY${YELLOW}-------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enable rsa key loggin ? yes/no ( Leave empty for default mode ) ${YELLOW}] \n    ${CYAN}RSAKEY : "
	read RSAKEY
	echo -e "   ${YELLOW}---------------------------------SCP MODE${YELLOW}-------------------------------${RESET}"
else
	RSAKEY="$RSAKEY"
fi
if [ "$RSAKEY" == "yes" ];	then
	if [ -z "$KEYFILE" ];	then
		echo -e "   ${YELLOW}--------------------------------KEY FILE${YELLOW}--------------------------------${RESET}"
		echo -ne "  ${YELLOW}[${GREEN} Enter the key file name wants for ssh loggin' ${YELLOW}] \n    ${CYAN}KEYFILE : "
		read KEYFILE
		if [ ! -f "$KEYFILE" ];	then
			echo -ne "  ${YELLOW}[${CYAN} $KEYFILE : ${RED}KEY file not found! ${YELLOW}] \n   ${YELLOW}--------------------------------KEY FILE${YELLOW}--------------------------------${RESET}\n"
			exit
		else
			echo -ne "  ${YELLOW}[${CYAN} $KEYFILE : ${GREEN} KEY file found! ${YELLOW}] \n   ${YELLOW}--------------------------------KEY FILE${YELLOW}--------------------------------${RESET}\n"
			KEYFILE="-i $KEYFILE"
		fi
	else
		KEYFILE="$KEYFILE"
	fi
fi
if [ -z "$SCP" ];	then
	echo -e "   ${YELLOW}---------------------------------SCP MODE${YELLOW}-------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enable scp file uploading ? yes/no ( Leave empty for default mode ) ${YELLOW}] \n    ${CYAN}SCP : "
	read SCP
	echo -e "   ${YELLOW}---------------------------------SCP MODE${YELLOW}-------------------------------${RESET}"
else
	SCP="$SCP"
fi
if [ "$SCP" == "yes" ];	then
	if [ -z "$SCPFILE" ];	then
		echo -e "   ${YELLOW}--------------------------------SCP FILE${YELLOW}--------------------------------${RESET}"
		echo -ne "  ${YELLOW}[${GREEN} Enter the scp file name wants to upload on remote server ${YELLOW}] \n    ${CYAN}SCPFILE : "
		read SCPFILE
		if [ ! -f "$SCPFILE" ];	then
			echo -ne "  ${YELLOW}[${CYAN} $SCPFILE : ${RED}SCP file not found! ${YELLOW}] \n   ${YELLOW}--------------------------------SCP FILE${YELLOW}--------------------------------${RESET}\n"
			exit
		else
			echo -ne "  ${YELLOW}[${CYAN} $SCPFILE : ${GREEN} SCP file found! ${YELLOW}] \n   ${YELLOW}--------------------------------SCP FILE${YELLOW}--------------------------------${RESET}\n"
		fi
	else
		SCPFILE="$SCPFILE"
	fi
	if [ -z "$SCPPATH" ];	then
		echo -e "   ${YELLOW}--------------------------------SCP PATH${YELLOW}--------------------------------${RESET}"
		echo -ne "  ${YELLOW}[${GREEN} Enter the path where you want to upload your scp file ${YELLOW}] \n    ${CYAN}SCPPATH : "
		read SCPPATH
		if [ -z "$SCPPATH" ];	then
			echo -ne "  ${YELLOW}[${CYAN} $SCPPATH : ${RED}SCP path not found! ${YELLOW}] \n   ${YELLOW}--------------------------------SCP PATH${YELLOW}--------------------------------${RESET}\n"
			exit
		else
			echo -e "   ${YELLOW}--------------------------------SCP PATH${YELLOW}--------------------------------${RESET}"
		fi
	else
		SCPPATH="$SCPPATH"
	fi
fi
if [ "$SCP" != "yes" ];	then
	if [ -z "$ExecSpeed" ];	then
		echo -e "   ${YELLOW}-----------------------------Execution Speed${YELLOW}-----------------------------${RESET}"
		echo -ne "  ${YELLOW}[${GREEN} Enable ssh execution speed ? yes/no ( Leave empty for default speed ) ${YELLOW}] \n    ${CYAN}ExecSpeed : "
		read ExecSpeed
		echo -e "   ${YELLOW}-----------------------------Execution Speed${YELLOW}-----------------------------${RESET}"
		if [ "$ExecSpeed" == "yes" ];	then
			ExecSpeed="&"
		else
			ExecSpeed=''
		fi
	else
		if [ "$ExecSpeed" == "yes" ];	then
			ExecSpeed="&"
		else
			ExecSpeed=''
		fi
	fi
fi
if [ -z "$CMD" ];	then
	echo -e "   ${YELLOW}---------------------------------COMMAND${YELLOW}---------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enter cmd to exec on server ( Leave empty for default cmd ) ${YELLOW}] \n    ${CYAN}CMD : "
	read CMD
	echo -e "   ${YELLOW}---------------------------------COMMAND${YELLOW}---------------------------------${RESET}"
	if [ -z "$CMD" ];	then
		CMD="echo \"USER:\`whoami\` PROC:\`grep -c ^processor /proc/cpuinfo\` VER:\`uname -a\`\""
	fi
else
	CMD="$CMD"
fi
if [ -z "$PORT" ];	then
	echo -e "   ${YELLOW}---------------------------------SSH PORT${YELLOW}--------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enter the default ssh port ( Leave empty for default port ) ${YELLOW}] \n    ${CYAN}PORT : "
	read DPORT
	echo -e "   ${YELLOW}---------------------------------SSH PORT${YELLOW}--------------------------------${RESET}"
	if [ -z "$DPORT" ];	then
		DPORT=22
	fi
else
	DPORT="$PORT"
fi
if [ -z "$UserKnownHostsFile" ];	then
	echo -e "   ${YELLOW}--------------------------------HOST FILE${YELLOW}--------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enter path for known host file ( Leave empty for default path ) ${YELLOW}] \n    ${CYAN}UserKnownHostsFile : "
	read UserKnownHostsFile
	echo -e "   ${YELLOW}--------------------------------HOST FILE${YELLOW}--------------------------------${RESET}"
	if [ -z "$UserKnownHostsFile" ];	then
		UserKnownHostsFile='/dev/null'
	fi
else
	UserKnownHostsFile="$UserKnownHostsFile"
fi
if [ -z "$BatchMode" ];	then
	echo -e "   ${YELLOW}--------------------------------BATCH MODE${YELLOW}-------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enable ssh batch mode ? yes/no ( Leave empty for default mode ) ${YELLOW}] \n    ${CYAN}BatchMode : "
	read BatchMode
	echo -e "   ${YELLOW}--------------------------------BATCH MODE${YELLOW}-------------------------------${RESET}"
	if [ -z "$BatchMode" ];	then
		BatchMode='no'
	fi
else
	BatchMode="$BatchMode"
fi
if [ -z "$ConnectTimeout" ];	then
	echo -e "   ${YELLOW}---------------------------CONNECTION TIME OUT${YELLOW}---------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} No's of sec for auto dc from dead server ( Leave empty for default sec ) ${YELLOW}] \n    ${CYAN}ConnectTimeout : "
	read ConnectTimeout
	echo -e "   ${YELLOW}---------------------------CONNECTION TIME OUT${YELLOW}---------------------------${RESET}"
	if [ -z "$ConnectTimeout" ];	then
		ConnectTimeout=5
	fi
else
	ConnectTimeout="$ConnectTimeout"
fi
if [ -z "$StrictHostKeyChecking" ];	then
	echo -e "   ${YELLOW}----------------------------CHECKING HOST KEY${YELLOW}----------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enable ssh host key checking ? yes/no ( Leave empty for default setting ) ${YELLOW}] \n    ${CYAN}StrictHostKeyChecking : "
	read StrictHostKeyChecking
	echo -e "   ${YELLOW}----------------------------CHECKING HOST KEY${YELLOW}----------------------------${RESET}"
	if [ -z "$StrictHostKeyChecking" ];	then
		StrictHostKeyChecking='no'
	fi
else
	StrictHostKeyChecking="$StrictHostKeyChecking"
fi
if [ -z "$Format" ];	then
	echo -e "   ${YELLOW}-----------------------------SSH LIST Format${YELLOW}-----------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enter your file format ( E.g USER PASS IP PORT ) ${YELLOW}] \n    ${CYAN}Format : "
	read Format
	echo -e "   ${YELLOW}-----------------------------SSH LIST Format${YELLOW}-----------------------------${RESET}"
	if [ -z "$Format" ];	then
		Format='USER PASS IP PORT'
	fi
else
	Format="$Format"
fi
if [ -z "$SSHLIST" ];	then
	echo -e "   ${YELLOW}------------------------------SSH LIST FILE${YELLOW}------------------------------${RESET}"
	echo -ne "  ${YELLOW}[${GREEN} Enter the ssh list file name ( default file is sshlist ) ${YELLOW}] \n    ${CYAN}FILENAME : "
	read SSHLIST
	if [ -z "$SSHLIST" ];	then
		SSHLIST='sshlist'
	fi
else
	SSHLIST="$SSHLIST"
fi
if [ ! -f "$SSHLIST" ];	then
	echo -ne "  ${YELLOW}[${CYAN} $SSHLIST : ${RED}SSH list file not found! ${YELLOW}] \n   ${YELLOW}------------------------------SSH LIST FILE${YELLOW}------------------------------${RESET}\n"
	exit
else
	echo -ne "  ${YELLOW}[${CYAN} $SSHLIST : ${GREEN} SSH list file found! ${YELLOW}] \n   ${YELLOW}------------------------------SSH LIST FILE${YELLOW}------------------------------${RESET}\n"
fi
echo "" >> $SSHLIST
sed -i '/^$/d' $SSHLIST
sed -i "s/:/ /g" $SSHLIST
perl -pi -e 's/\r\n/\n/g' $SSHLIST
IFS=$'\n'
################################################## Validation End ##################################################

################################################# Progress Run Int #################################################
progreSh 0
progreSh 100
printf "\n\n"
################################################# Progress Run End ##################################################

################################################# Mass Exec Run Int #################################################
i=0
total=$(wc -l $SSHLIST | awk {'print $1'})
for SERVER in $(cat $SSHLIST)
do
	if [ ! -z "$SERVER" ];	then
		i=$(($i+1))
		if [ $(echo $Format | awk {'print $1'}) == "USER" ];	then
			USER=$(echo $SERVER | awk {'print $1'})
		fi
		if [ $(echo $Format | awk {'print $2'}) == "USER" ];	then
			USER=$(echo $SERVER | awk {'print $2'})
		fi
		if [ $(echo $Format | awk {'print $3'}) == "USER" ];	then
			USER=$(echo $SERVER | awk {'print $3'})
		fi
		if [ ! -z $(echo $Format | awk {'print $4'}) ];	then
			if [ $(echo $Format | awk {'print $4'}) == "USER" ];	then
				USER=$(echo $SERVER | awk {'print $4'})
			fi
		fi
		if [ $(echo $Format | awk {'print $1'}) == "PASS" ];	then
			PASS=$(echo $SERVER | awk {'print $1'})
		fi
		if [ $(echo $Format | awk {'print $2'}) == "PASS" ];	then
			PASS=$(echo $SERVER | awk {'print $2'})
		fi
		if [ $(echo $Format | awk {'print $3'}) == "PASS" ];	then
			PASS=$(echo $SERVER | awk {'print $3'})
		fi
		if [ ! -z $(echo $Format | awk {'print $4'}) ];	then
			if [ $(echo $Format | awk {'print $4'}) == "PASS" ];	then
				PASS=$(echo $SERVER | awk {'print $4'})
			fi
		fi
		if [ $(echo $Format | awk {'print $1'}) == "IP" ];	then
			IP=$(echo $SERVER | awk {'print $1'})
		fi
		if [ $(echo $Format | awk {'print $2'}) == "IP" ];	then
			IP=$(echo $SERVER | awk {'print $2'})
		fi
		if [ $(echo $Format | awk {'print $3'}) == "IP" ];	then
			IP=$(echo $SERVER | awk {'print $3'})
		fi
		if [ ! -z $(echo $Format | awk {'print $4'}) ];	then
			if [ $(echo $Format | awk {'print $4'}) == "IP" ];	then
				IP=$(echo $SERVER | awk {'print $4'})
			fi
		fi
		if [ $(echo $Format | awk {'print $1'}) == "PORT" ];	then
			PORT=$(echo $SERVER | awk {'print $1'})
		fi
		if [ $(echo $Format | awk {'print $2'}) == "PORT" ];	then
			PORT=$(echo $SERVER | awk {'print $2'})
		fi
		if [ $(echo $Format | awk {'print $3'}) == "PORT" ];	then
			PORT=$(echo $SERVER | awk {'print $3'})
		fi
		if [ ! -z $(echo $Format | awk {'print $4'}) ];	then
			if [ $(echo $Format | awk {'print $4'}) == "PORT" ];	then
				PORT=$(echo $SERVER | awk {'print $4'})
			fi
		fi
		if [ -z "$PORT" ];	then
			PORT="$DPORT"
		fi
		if [ "$SCP" == "yes" ];	then
			./sshpass -p "$PASS" scp $KEYFILE -q -P "$PORT" -o "UserKnownHostsFile=$UserKnownHostsFile" -o "BatchMode=$BatchMode" -o "ConnectTimeout=$ConnectTimeout" -o "StrictHostKeyChecking=$StrictHostKeyChecking" "$SCPFILE" $USER@$IP:$SCPPATH 2> /dev/null
			if [ "$?" == 0 ];	then
				echo -ne "  ${LYELLOW}[${LCYAN} $SCPFILE ${LWHITE} Transfered to ${LGREEN}$IP:$PORT ${LYELLOW}] ${RESET}\n"
			fi
		fi
		if [ "$ExecSpeed" == "&" ];	then
			./sshpass -p "$PASS" ssh $KEYFILE -q -p "$PORT" -o "UserKnownHostsFile=$UserKnownHostsFile" -o "BatchMode=$BatchMode" -o "ConnectTimeout=$ConnectTimeout" -o "StrictHostKeyChecking=$StrictHostKeyChecking" $USER@$IP "echo -e \"\033[0m\";echo -ne \"  \033[93m[\033[91m $i/$total \033[93m] \033[93m[\033[97m Executing cmd to \033[92m$IP:$PORT \033[93m] \033[96m \";$CMD" 2> /dev/null & 
		else
			./sshpass -p "$PASS" ssh $KEYFILE -q -p "$PORT" -o "UserKnownHostsFile=$UserKnownHostsFile" -o "BatchMode=$BatchMode" -o "ConnectTimeout=$ConnectTimeout" -o "StrictHostKeyChecking=$StrictHostKeyChecking" $USER@$IP "echo -ne \"  \033[93m[\033[91m $i/$total \033[93m] \033[93m[\033[97m Executing cmd to \033[92m$IP:$PORT \033[93m] \033[96m \";$CMD;echo -e \"\033[0m\"" 2> /dev/null
			if [ "$?" == 0 ];	then
				echo $SERVER >> good.txt
			else
				echo $SERVER >> bad.txt
			fi
		fi
	fi
done
################################################# Mass Exec Run End #################################################